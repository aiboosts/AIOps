apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default  
  name: pod-deleter
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  namespace: default  
  name: pod-deleter-binding
subjects:
- kind: ServiceAccount
  name: default  
  namespace: default
roleRef:
  kind: Role
  name: pod-deleter
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: cpu-usage-prediction-cronjob
  namespace: default
spec:
  schedule: "* * * * *"  # Run every minute. You can adjust this schedule.
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: cpu-usage-prediction
              image: cpu-usage-prediction:latest  # Ensure this matches the image tag you use
              imagePullPolicy: IfNotPresent
              env:
                - name: PROMETHEUS_URL
                  value: "http://prometheus-kube-prometheus-prometheus:9090/api/v1/query"  # Specify your Prometheus URL here
              command:
                - "sh"
                - "-c"
                - |
                  # Run the Python script
                  python cpu_usage_prediction.py

                  # Now delete the pods based on the output
                  PODS_TO_DELETE=$(cat /tmp/pod_list.txt)  # Assuming your Python script writes the list of pods to /tmp/pod_list.txt
                  for POD_NAME in $PODS_TO_DELETE; do
                    curl -k -X DELETE \
                      "https://kubernetes.default.svc/api/v1/namespaces/default/pods/$POD_NAME" \
                      --header "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
                      --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                  done
          restartPolicy: OnFailure